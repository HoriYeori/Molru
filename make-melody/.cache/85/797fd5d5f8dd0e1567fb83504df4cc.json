{"id":"node_modules/abcjs/src/parse/wrap_lines.js","dependencies":[{"name":"C:\\Users\\SSAFY\\Documents\\S06P22B107\\make-melody\\package.json","includedInParent":true,"mtime":1648705913118},{"name":"C:\\Users\\SSAFY\\Documents\\S06P22B107\\make-melody\\node_modules\\abcjs\\package.json","includedInParent":true,"mtime":1648703408663}],"generated":{"js":"//    wrap_lines.js: does line wrap on an already parsed tune.\n\nfunction wrapLines(tune, lineBreaks, barNumbers) {\n\tif (!lineBreaks || tune.lines.length === 0)\n\t\treturn;\n\n\t// tune.lines contains nested arrays: there is an array of lines (that's the part this function rewrites),\n\t// there is an array of staffs per line (for instance, piano will have 2, orchestra will have many)\n\t// there is an array of voices per staff (for instance, 4-part harmony might have bass and tenor on a single staff)\n\tvar lines = tune.deline({lineBreaks: false});\n\tvar linesBreakElements = findLineBreaks(lines, lineBreaks);\n\t//console.log(JSON.stringify(linesBreakElements))\n\ttune.lines = addLineBreaks(lines, linesBreakElements, barNumbers);\n\ttune.lineBreaks = linesBreakElements;\n}\n\nfunction addLineBreaks(lines, linesBreakElements, barNumbers) {\n\t// linesBreakElements is an array of all of the elements that break for a new line\n\t// The objects in the array look like:\n\t// {\"ogLine\":0,\"line\":0,\"staff\":0,\"voice\":0,\"start\":0, \"end\":21}\n\t// ogLine is the original line that it came from,\n\t// line is the target line.\n\t// then copy all the elements from start to end for the staff and voice specified.\n\t// If the item doesn't contain \"staff\" then it is a non music line and should just be copied.\n\tvar outputLines = [];\n\tvar lastKeySig = []; // This is per staff - if the key changed then this will be populated.\n\tvar lastStem = [];\n\tvar currentBarNumber = 1;\n\tfor (var i = 0; i < linesBreakElements.length; i++) {\n\t\tvar action = linesBreakElements[i];\n\t\tif (lines[action.ogLine].staff) {\n\t\t\tvar inputStaff = lines[action.ogLine].staff[action.staff];\n\t\t\tif (!outputLines[action.line]) {\n\t\t\t\toutputLines[action.line] = {staff: []}\n\t\t\t}\n\t\t\tif (!outputLines[action.line].staff[action.staff]) {\n\t\t\t\toutputLines[action.line].staff[action.staff] = {voices: []};\n\t\t\t\tif (barNumbers !== undefined && action.staff === 0 && action.line > 0) {\n\t\t\t\t\toutputLines[action.line].staff[action.staff].barNumber = currentBarNumber;\n\t\t\t\t}\n\t\t\t\tvar keys = Object.keys(inputStaff)\n\t\t\t\tfor (var k = 0; k < keys.length; k++) {\n\t\t\t\t\tvar skip = keys[k] === \"voices\";\n\t\t\t\t\tif (keys[k] === \"meter\" && action.line !== 0)\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\tif (!skip)\n\t\t\t\t\t\toutputLines[action.line].staff[action.staff][keys[k]] = inputStaff[keys[k]];\n\t\t\t\t}\n\t\t\t\tif (lastKeySig[action.staff])\n\t\t\t\t\toutputLines[action.line].staff[action.staff].key = lastKeySig[action.staff];\n\n\t\t\t}\n\t\t\tif (!outputLines[action.line].staff[action.staff].voices[action.voice]) {\n\t\t\t\toutputLines[action.line].staff[action.staff].voices[action.voice] = [];\n\t\t\t}\n\t\t\toutputLines[action.line].staff[action.staff].voices[action.voice] =\n\t\t\t\tlines[action.ogLine].staff[action.staff].voices[action.voice].slice(action.start, action.end+1);\n\t\t\tif (lastStem[action.staff*10+action.voice])\n\t\t\t\toutputLines[action.line].staff[action.staff].voices[action.voice].unshift({el_type: \"stem\", direction: lastStem[action.staff*10+action.voice].direction})\n\t\t\tvar currVoice = outputLines[action.line].staff[action.staff].voices[action.voice];\n\t\t\tfor (var kk = currVoice.length-1; kk >= 0; kk--) {\n\t\t\t\tif (currVoice[kk].el_type === \"key\") {\n\t\t\t\t\tlastKeySig[action.staff] = {\n\t\t\t\t\t\troot: currVoice[kk].root,\n\t\t\t\t\t\tacc: currVoice[kk].acc,\n\t\t\t\t\t\tmode: currVoice[kk].mode,\n\t\t\t\t\t\taccidentals: currVoice[kk].accidentals.filter(function (acc) { return acc.acc !== 'natural' })\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (kk = currVoice.length-1; kk >= 0; kk--) {\n\t\t\t\tif (currVoice[kk].el_type === \"stem\") {\n\t\t\t\t\tlastStem[action.staff*10+action.voice] = {\n\t\t\t\t\t\tdirection: currVoice[kk].direction,\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (barNumbers !== undefined && action.staff === 0 && action.voice === 0) {\n\t\t\t\tfor (kk = 0; kk < currVoice.length; kk++) {\n\t\t\t\t\tif (currVoice[kk].el_type === 'bar') {\n\t\t\t\t\t\tcurrentBarNumber++\n\t\t\t\t\t\tif (kk === currVoice.length-1)\n\t\t\t\t\t\t\tdelete currVoice[kk].barNumber\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcurrVoice[kk].barNumber = currentBarNumber\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\toutputLines[action.line] = lines[action.ogLine];\n\t\t}\n\t}\n\t// There could be some missing info - if the tune passed in was incomplete or had different lengths for different voices or was missing a voice altogether - just fill in the gaps.\n\tfor (var ii = 0; ii < outputLines.length; ii++) {\n\t\tif (outputLines[ii].staff) {\n\t\t\toutputLines[ii].staff = outputLines[ii].staff.filter(function (el) {\n\t\t\t\treturn el != null;\n\t\t\t});\n\t\t}\n\t}\n\treturn outputLines;\n}\n\n\nfunction findLineBreaks(lines, lineBreakArray) {\n\t// lineBreakArray is an array of all of the sections of the tune - often there will just be one\n\t// section unless there is a subtitle or other non-music lines. Each of the elements of\n\t// Each element of lineBreakArray is an array of the zero-based last measure of the line.\n\tvar lineBreakIndexes = [];\n\tvar lbai = 0;\n\tvar lineCounter = 0;\n\tvar outputLine = 0;\n\tfor (var i = 0; i < lines.length; i++) {\n\t\tvar line = lines[i];\n\t\tif (line.staff) {\n\t\t\tvar lineStart = lineCounter;\n\t\t\tvar lineBreaks = lineBreakArray[lbai];\n\t\t\tlbai++;\n\t\t\tfor (var j = 0; j < line.staff.length; j++) {\n\t\t\t\tvar staff = line.staff[j];\n\t\t\t\tfor (var k = 0; k < staff.voices.length; k++) {\n\t\t\t\t\toutputLine = lineStart;\n\t\t\t\t\tvar measureNumber = 0;\n\t\t\t\t\tvar lbi = 0;\n\t\t\t\t\tvar voice = staff.voices[k];\n\t\t\t\t\tvar start = 0;\n\t\t\t\t\tfor (var e = 0; e < voice.length; e++) {\n\t\t\t\t\t\tvar el = voice[e];\n\n\t\t\t\t\t\tif (el.el_type === 'bar') {\n\t\t\t\t\t\t\tif (lineBreaks[lbi] === measureNumber) {\n\t\t\t\t\t\t\t\tlineBreakIndexes.push({ ogLine: i, line: outputLine, staff: j, voice: k, start: start, end: e})\n\t\t\t\t\t\t\t\tstart = e + 1;\n\t\t\t\t\t\t\t\toutputLine++;\n\t\t\t\t\t\t\t\tlineCounter = Math.max(lineCounter, outputLine)\n\t\t\t\t\t\t\t\tlbi++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmeasureNumber++;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlineBreakIndexes.push({ ogLine: i, line: outputLine, staff: j, voice: k, start: start, end: voice.length})\n\t\t\t\t\toutputLine++;\n\t\t\t\t\tlineCounter = Math.max(lineCounter, outputLine)\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlineBreakIndexes.push({ ogLine: i, line: outputLine })\n\t\t\toutputLine++;\n\t\t\tlineCounter = Math.max(lineCounter, outputLine)\n\t\t}\n\t}\n\treturn lineBreakIndexes;\n}\n\n\nfunction freeFormLineBreaks(widths, lineBreakPoint) {\n\tvar lineBreaks = [];\n\tvar totals = [];\n\tvar totalThisLine = 0;\n\t// run through each measure and see if the accumulation is less than the ideal.\n\t// if it passes the ideal, then see whether the last or this one is closer to the ideal.\n\tfor (var i = 0; i < widths.length; i++) {\n\t\tvar width = widths[i];\n\t\tvar attemptedWidth = totalThisLine + width;\n\t\tif (attemptedWidth < lineBreakPoint)\n\t\t\ttotalThisLine = attemptedWidth;\n\t\telse {\n\t\t\t// This just passed the ideal, so see whether the previous or the current number of measures is closer.\n\t\t\tvar oldDistance = lineBreakPoint - totalThisLine;\n\t\t\tvar newDistance = attemptedWidth - lineBreakPoint;\n\t\t\tif (oldDistance < newDistance && totalThisLine > 0) {\n\t\t\t\tlineBreaks.push(i - 1);\n\t\t\t\ttotals.push(Math.round(totalThisLine - width));\n\t\t\t\ttotalThisLine = width;\n\t\t\t} else {\n\t\t\t\tif (i < widths.length-1) {\n\t\t\t\t\tlineBreaks.push(i);\n\t\t\t\t\ttotals.push(Math.round(totalThisLine));\n\t\t\t\t\ttotalThisLine = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\ttotals.push(Math.round(totalThisLine));\n\treturn { lineBreaks: lineBreaks, totals: totals };\n}\n\nfunction clone(arr) {\n\tvar newArr = [];\n\tfor (var i = 0; i < arr.length; i++)\n\t\tnewArr.push(arr[i]);\n\treturn newArr;\n}\n\nfunction oneTry(measureWidths, idealWidths, accumulator, lineAccumulator, lineWidths, lastVariance, highestVariance, currLine, lineBreaks, startIndex, otherTries) {\n\tfor (var i = startIndex; i < measureWidths.length; i++) {\n\t\tvar measureWidth = measureWidths[i];\n\t\taccumulator += measureWidth;\n\t\tlineAccumulator += measureWidth;\n\t\tvar thisVariance = Math.abs(accumulator - idealWidths[currLine]);\n\t\tvar varianceIsClose = Math.abs(thisVariance - lastVariance) < idealWidths[0] / 10; // see if the difference is less than 10%, if so, run the test both ways.\n\t\tif (varianceIsClose) {\n\t\t\tif (thisVariance < lastVariance) {\n\t\t\t\t// Also attempt one less measure on the current line - sometimes that works out better.\n\t\t\t\tvar newWidths = clone(lineWidths);\n\t\t\t\tvar newBreaks = clone(lineBreaks);\n\t\t\t\tnewBreaks.push(i-1);\n\t\t\t\tnewWidths.push(lineAccumulator - measureWidth);\n\t\t\t\totherTries.push({\n\t\t\t\t\taccumulator: accumulator,\n\t\t\t\t\tlineAccumulator: measureWidth,\n\t\t\t\t\tlineWidths: newWidths,\n\t\t\t\t\tlastVariance: Math.abs(accumulator - idealWidths[currLine+1]),\n\t\t\t\t\thighestVariance: Math.max(highestVariance, lastVariance),\n\t\t\t\t\tcurrLine: currLine+1,\n\t\t\t\t\tlineBreaks: newBreaks,\n\t\t\t\t\tstartIndex: i+1});\n\t\t\t} else if (thisVariance > lastVariance && i < measureWidths.length-1) {\n\t\t\t\t// Also attempt one extra measure on this line.\n\t\t\t\tnewWidths = clone(lineWidths);\n\t\t\t\tnewBreaks = clone(lineBreaks);\n\t\t\t\t// newBreaks[newBreaks.length-1] = i;\n\t\t\t\t// newWidths[newWidths.length-1] = lineAccumulator;\n\t\t\t\totherTries.push({\n\t\t\t\t\taccumulator: accumulator,\n\t\t\t\t\tlineAccumulator: lineAccumulator,\n\t\t\t\t\tlineWidths: newWidths,\n\t\t\t\t\tlastVariance: thisVariance,\n\t\t\t\t\thighestVariance: Math.max(highestVariance, thisVariance),\n\t\t\t\t\tcurrLine: currLine,\n\t\t\t\t\tlineBreaks: newBreaks,\n\t\t\t\t\tstartIndex: i+1});\n\t\t\t}\n\t\t}\n\t\tif (thisVariance > lastVariance) {\n\t\t\tlineBreaks.push(i - 1);\n\t\t\tcurrLine++;\n\t\t\thighestVariance = Math.max(highestVariance, lastVariance);\n\t\t\tlastVariance = Math.abs(accumulator - idealWidths[currLine]);\n\t\t\tlineWidths.push(lineAccumulator - measureWidth);\n\t\t\tlineAccumulator = measureWidth;\n\t\t} else {\n\t\t\tlastVariance = thisVariance;\n\t\t}\n\t}\n\tlineWidths.push(lineAccumulator);\n}\n\nfunction optimizeLineWidths(widths, lineBreakPoint, lineBreaks, explanation) {\n\t//\tfigure out how many lines\n\tvar numLines = Math.ceil(widths.total / lineBreakPoint); // + 1 TODO-PER: this used to be plus one - not sure why\n\n\t//\tget the ideal width for a line (cumulative width / num lines) - approx the same as lineBreakPoint except for rounding\n\tvar idealWidth = Math.floor(widths.total / numLines);\n\n\t//\tget each ideal line width (1*ideal, 2*ideal, 3*ideal, etc)\n\tvar idealWidths = [];\n\tfor (var i = 0; i < numLines; i++)\n\t\tidealWidths.push(idealWidth*(i+1));\n\n\t//\tfrom first measure, step through accum. Widths until the abs of the ideal is greater than the last one.\n\t// This can sometimes look funny in edge cases, so when the length is within 10%, try one more or one less to see which is better.\n\t// This is better than trying all the possibilities because that would get to be a huge number for even a medium size piece.\n\t// This method seems to never generate more than about 16 tries and it is usually 4 or less.\n\tvar otherTries = [];\n\totherTries.push({\n\t\taccumulator: 0,\n\t\tlineAccumulator: 0,\n\t\tlineWidths: [],\n\t\tlastVariance: 999999,\n\t\thighestVariance: 0,\n\t\tcurrLine: 0,\n\t\tlineBreaks: [], // These are the zero-based last measure on each line\n\t\tstartIndex: 0});\n\tvar index = 0;\n\twhile (index < otherTries.length) {\n\t\toneTry(widths.measureWidths,\n\t\t\tidealWidths,\n\t\t\totherTries[index].accumulator,\n\t\t\totherTries[index].lineAccumulator,\n\t\t\totherTries[index].lineWidths,\n\t\t\totherTries[index].lastVariance,\n\t\t\totherTries[index].highestVariance,\n\t\t\totherTries[index].currLine,\n\t\t\totherTries[index].lineBreaks,\n\t\t\totherTries[index].startIndex,\n\t\t\totherTries);\n\t\tindex++;\n\t}\n\tfor (i = 0; i < otherTries.length; i++) {\n\t\tvar otherTry = otherTries[i];\n\t\totherTry.variances = [];\n\t\totherTry.aveVariance = 0;\n\t\tfor (var j = 0; j < otherTry.lineWidths.length; j++) {\n\t\t\tvar lineWidth = otherTry.lineWidths[j];\n\t\t\totherTry.variances.push(lineWidth - idealWidths[0]);\n\t\t\totherTry.aveVariance += Math.abs(lineWidth - idealWidths[0]);\n\t\t}\n\t\totherTry.aveVariance =  otherTry.aveVariance / otherTry.lineWidths.length;\n\t\texplanation.attempts.push({ type: \"optimizeLineWidths\", lineBreaks: otherTry.lineBreaks, variances: otherTry.variances, aveVariance: otherTry.aveVariance, widths: widths.measureWidths });\n\t}\n\tvar smallest = 9999999;\n\tvar smallestIndex = -1;\n\tfor (i = 0; i < otherTries.length; i++) {\n\t\totherTry = otherTries[i];\n\t\tif (otherTry.aveVariance < smallest) {\n\t\t\tsmallest = otherTry.aveVariance;\n\t\t\tsmallestIndex = i;\n\t\t}\n\t}\n\treturn { failed: false, lineBreaks: otherTries[smallestIndex].lineBreaks, variance: otherTries[smallestIndex].highestVariance };\n}\n\nfunction fixedMeasureLineBreaks(widths, lineBreakPoint, preferredMeasuresPerLine) {\n\tvar lineBreaks = [];\n\tvar totals = [];\n\tvar thisWidth = 0;\n\tvar failed = false;\n\tfor (var i = 0; i < widths.length; i++) {\n\t\tthisWidth += widths[i];\n\t\tif (thisWidth > lineBreakPoint) {\n\t\t\tfailed = true;\n\t\t}\n\t\tif (i % preferredMeasuresPerLine === (preferredMeasuresPerLine-1)) {\n\t\t\tif (i !== widths.length-1) // Don't bother putting a line break for the last line - it's already a break.\n\t\t\t\tlineBreaks.push(i);\n\t\t\ttotals.push(Math.round(thisWidth));\n\t\t\tthisWidth = 0;\n\t\t}\n\t}\n\treturn { failed: failed, totals: totals, lineBreaks: lineBreaks };\n}\n\nfunction getRevisedTuneParams(lineBreaks, staffWidth, params) {\n\n\tvar revisedParams = {\n\t\tlineBreaks: lineBreaks,\n\t\tstaffwidth: staffWidth\n\t};\n\tfor (var key in params) {\n\t\tif (params.hasOwnProperty(key) && key !== 'wrap' && key !== 'staffwidth') {\n\t\t\trevisedParams[key] = params[key];\n\t\t}\n\t}\n\n\treturn { revisedParams: revisedParams };\n}\n\nfunction calcLineWraps(tune, widths, params) {\n\t// For calculating how much can go on the line, it depends on the width of the line. It is a convenience to just divide it here\n\t// by the minimum spacing instead of multiplying the min spacing later.\n\t// The scaling works differently: this is done by changing the scaling of the outer SVG, so the scaling needs to be compensated\n\t// for here, because the actual width will be different from the calculated numbers.\n\n\t// If the desired width is less than the margin, just punt and return the original tune\n\t//console.log(widths)\n\tif (widths.length === 0 || params.staffwidth < widths[0].left) {\n\t\treturn {\n\t\t\treParse: false,\n\t\t\texplanation: \"Staff width is narrower than the margin\",\n\t\t\trevisedParams: params\n\t\t};\n\t}\n\tvar scale = params.scale ? Math.max(params.scale, 0.1) : 1;\n\tvar minSpacing = params.wrap.minSpacing ? Math.max(parseFloat(params.wrap.minSpacing), 1) : 1;\n\tvar minSpacingLimit = params.wrap.minSpacingLimit ? Math.max(parseFloat(params.wrap.minSpacingLimit), 1) : minSpacing - 0.1;\n\tvar maxSpacing = params.wrap.maxSpacing ? Math.max(parseFloat(params.wrap.maxSpacing), 1) : undefined;\n\tif (params.wrap.lastLineLimit && !maxSpacing)\n\t\tmaxSpacing = Math.max(parseFloat(params.wrap.lastLineLimit), 1);\n\t// var targetHeight = params.wrap.targetHeight ? Math.max(parseInt(params.wrap.targetHeight, 10), 100) : undefined;\n\tvar preferredMeasuresPerLine = params.wrap.preferredMeasuresPerLine ? Math.max(parseInt(params.wrap.preferredMeasuresPerLine, 10), 0) : undefined;\n\n\tvar accumulatedLineBreaks = [];\n\tvar explanations = [];\n\tfor (var s = 0; s < widths.length; s++) {\n\t\tvar section = widths[s];\n\t\tvar usableWidth = params.staffwidth - section.left;\n\t\tvar lineBreakPoint = usableWidth / minSpacing / scale;\n\t\tvar minLineSize = usableWidth / maxSpacing / scale;\n\t\tvar allowableVariance = usableWidth / minSpacingLimit / scale;\n\t\tvar explanation = {\n\t\t\twidths: section,\n\t\t\tlineBreakPoint: lineBreakPoint,\n\t\t\tminLineSize: minLineSize,\n\t\t\tattempts: [],\n\t\t\tstaffWidth: params.staffwidth,\n\t\t\tminWidth: Math.round(allowableVariance)\n\t\t};\n\n\t\t// If there is a preferred number of measures per line, test that first. If none of the lines is too long, then we're finished.\n\t\tvar lineBreaks = null;\n\t\tif (preferredMeasuresPerLine) {\n\t\t\tvar f = fixedMeasureLineBreaks(section.measureWidths, lineBreakPoint, preferredMeasuresPerLine);\n\t\t\texplanation.attempts.push({\n\t\t\t\ttype: \"Fixed Measures Per Line\",\n\t\t\t\tpreferredMeasuresPerLine: preferredMeasuresPerLine,\n\t\t\t\tlineBreaks: f.lineBreaks,\n\t\t\t\tfailed: f.failed,\n\t\t\t\ttotals: f.totals\n\t\t\t});\n\t\t\tif (!f.failed)\n\t\t\t\tlineBreaks = f.lineBreaks;\n\t\t}\n\n\t\t// If we don't have lineBreaks yet, use the free form method of line breaks.\n\t\t// This will be called either if Preferred Measures is not used, or if the music is just weird - like a single measure is way too crowded.\n\t\tif (!lineBreaks) {\n\t\t\tvar ff = freeFormLineBreaks(section.measureWidths, lineBreakPoint);\n\t\t\texplanation.attempts.push({type: \"Free Form\", lineBreaks: ff.lineBreaks, totals: ff.totals});\n\t\t\tlineBreaks = ff.lineBreaks;\n\n\t\t\t// We now have an acceptable number of lines, but the measures may not be optimally distributed. See if there is a better distribution.\n\t\t\tif (lineBreaks.length > 0 && section.measureWidths.length < 25) {\n\t\t\t\t// Only do this if everything doesn't fit on one line.\n\t\t\t\t// This is an intensive operation and it is optional so just do it for shorter music.\n\t\t\t\tff = optimizeLineWidths(section, lineBreakPoint, lineBreaks, explanation);\n\t\t\t\texplanation.attempts.push({\n\t\t\t\t\ttype: \"Optimize\",\n\t\t\t\t\tfailed: ff.failed,\n\t\t\t\t\treason: ff.reason,\n\t\t\t\t\tlineBreaks: ff.lineBreaks,\n\t\t\t\t\ttotals: ff.totals\n\t\t\t\t});\n\t\t\t\tif (!ff.failed)\n\t\t\t\t\tlineBreaks = ff.lineBreaks;\n\t\t\t}\n\t\t}\n\t\taccumulatedLineBreaks.push(lineBreaks);\n\t\texplanations.push(explanation);\n\t}\n\t// If the vertical space exceeds targetHeight, remove a line and try again. If that is too crowded, then don't use it.\n\tvar staffWidth = params.staffwidth;\n\tvar ret = getRevisedTuneParams(accumulatedLineBreaks, staffWidth, params);\n\tret.explanation = explanations;\n\tret.reParse = true;\n\treturn ret;\n}\n\nmodule.exports = { wrapLines: wrapLines, calcLineWraps: calcLineWraps };\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/abcjs/src/parse/wrap_lines.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}}],"sources":{"node_modules/abcjs/src/parse/wrap_lines.js":"//    wrap_lines.js: does line wrap on an already parsed tune.\n\nfunction wrapLines(tune, lineBreaks, barNumbers) {\n\tif (!lineBreaks || tune.lines.length === 0)\n\t\treturn;\n\n\t// tune.lines contains nested arrays: there is an array of lines (that's the part this function rewrites),\n\t// there is an array of staffs per line (for instance, piano will have 2, orchestra will have many)\n\t// there is an array of voices per staff (for instance, 4-part harmony might have bass and tenor on a single staff)\n\tvar lines = tune.deline({lineBreaks: false});\n\tvar linesBreakElements = findLineBreaks(lines, lineBreaks);\n\t//console.log(JSON.stringify(linesBreakElements))\n\ttune.lines = addLineBreaks(lines, linesBreakElements, barNumbers);\n\ttune.lineBreaks = linesBreakElements;\n}\n\nfunction addLineBreaks(lines, linesBreakElements, barNumbers) {\n\t// linesBreakElements is an array of all of the elements that break for a new line\n\t// The objects in the array look like:\n\t// {\"ogLine\":0,\"line\":0,\"staff\":0,\"voice\":0,\"start\":0, \"end\":21}\n\t// ogLine is the original line that it came from,\n\t// line is the target line.\n\t// then copy all the elements from start to end for the staff and voice specified.\n\t// If the item doesn't contain \"staff\" then it is a non music line and should just be copied.\n\tvar outputLines = [];\n\tvar lastKeySig = []; // This is per staff - if the key changed then this will be populated.\n\tvar lastStem = [];\n\tvar currentBarNumber = 1;\n\tfor (var i = 0; i < linesBreakElements.length; i++) {\n\t\tvar action = linesBreakElements[i];\n\t\tif (lines[action.ogLine].staff) {\n\t\t\tvar inputStaff = lines[action.ogLine].staff[action.staff];\n\t\t\tif (!outputLines[action.line]) {\n\t\t\t\toutputLines[action.line] = {staff: []}\n\t\t\t}\n\t\t\tif (!outputLines[action.line].staff[action.staff]) {\n\t\t\t\toutputLines[action.line].staff[action.staff] = {voices: []};\n\t\t\t\tif (barNumbers !== undefined && action.staff === 0 && action.line > 0) {\n\t\t\t\t\toutputLines[action.line].staff[action.staff].barNumber = currentBarNumber;\n\t\t\t\t}\n\t\t\t\tvar keys = Object.keys(inputStaff)\n\t\t\t\tfor (var k = 0; k < keys.length; k++) {\n\t\t\t\t\tvar skip = keys[k] === \"voices\";\n\t\t\t\t\tif (keys[k] === \"meter\" && action.line !== 0)\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\tif (!skip)\n\t\t\t\t\t\toutputLines[action.line].staff[action.staff][keys[k]] = inputStaff[keys[k]];\n\t\t\t\t}\n\t\t\t\tif (lastKeySig[action.staff])\n\t\t\t\t\toutputLines[action.line].staff[action.staff].key = lastKeySig[action.staff];\n\n\t\t\t}\n\t\t\tif (!outputLines[action.line].staff[action.staff].voices[action.voice]) {\n\t\t\t\toutputLines[action.line].staff[action.staff].voices[action.voice] = [];\n\t\t\t}\n\t\t\toutputLines[action.line].staff[action.staff].voices[action.voice] =\n\t\t\t\tlines[action.ogLine].staff[action.staff].voices[action.voice].slice(action.start, action.end+1);\n\t\t\tif (lastStem[action.staff*10+action.voice])\n\t\t\t\toutputLines[action.line].staff[action.staff].voices[action.voice].unshift({el_type: \"stem\", direction: lastStem[action.staff*10+action.voice].direction})\n\t\t\tvar currVoice = outputLines[action.line].staff[action.staff].voices[action.voice];\n\t\t\tfor (var kk = currVoice.length-1; kk >= 0; kk--) {\n\t\t\t\tif (currVoice[kk].el_type === \"key\") {\n\t\t\t\t\tlastKeySig[action.staff] = {\n\t\t\t\t\t\troot: currVoice[kk].root,\n\t\t\t\t\t\tacc: currVoice[kk].acc,\n\t\t\t\t\t\tmode: currVoice[kk].mode,\n\t\t\t\t\t\taccidentals: currVoice[kk].accidentals.filter(function (acc) { return acc.acc !== 'natural' })\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (kk = currVoice.length-1; kk >= 0; kk--) {\n\t\t\t\tif (currVoice[kk].el_type === \"stem\") {\n\t\t\t\t\tlastStem[action.staff*10+action.voice] = {\n\t\t\t\t\t\tdirection: currVoice[kk].direction,\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (barNumbers !== undefined && action.staff === 0 && action.voice === 0) {\n\t\t\t\tfor (kk = 0; kk < currVoice.length; kk++) {\n\t\t\t\t\tif (currVoice[kk].el_type === 'bar') {\n\t\t\t\t\t\tcurrentBarNumber++\n\t\t\t\t\t\tif (kk === currVoice.length-1)\n\t\t\t\t\t\t\tdelete currVoice[kk].barNumber\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcurrVoice[kk].barNumber = currentBarNumber\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\toutputLines[action.line] = lines[action.ogLine];\n\t\t}\n\t}\n\t// There could be some missing info - if the tune passed in was incomplete or had different lengths for different voices or was missing a voice altogether - just fill in the gaps.\n\tfor (var ii = 0; ii < outputLines.length; ii++) {\n\t\tif (outputLines[ii].staff) {\n\t\t\toutputLines[ii].staff = outputLines[ii].staff.filter(function (el) {\n\t\t\t\treturn el != null;\n\t\t\t});\n\t\t}\n\t}\n\treturn outputLines;\n}\n\n\nfunction findLineBreaks(lines, lineBreakArray) {\n\t// lineBreakArray is an array of all of the sections of the tune - often there will just be one\n\t// section unless there is a subtitle or other non-music lines. Each of the elements of\n\t// Each element of lineBreakArray is an array of the zero-based last measure of the line.\n\tvar lineBreakIndexes = [];\n\tvar lbai = 0;\n\tvar lineCounter = 0;\n\tvar outputLine = 0;\n\tfor (var i = 0; i < lines.length; i++) {\n\t\tvar line = lines[i];\n\t\tif (line.staff) {\n\t\t\tvar lineStart = lineCounter;\n\t\t\tvar lineBreaks = lineBreakArray[lbai];\n\t\t\tlbai++;\n\t\t\tfor (var j = 0; j < line.staff.length; j++) {\n\t\t\t\tvar staff = line.staff[j];\n\t\t\t\tfor (var k = 0; k < staff.voices.length; k++) {\n\t\t\t\t\toutputLine = lineStart;\n\t\t\t\t\tvar measureNumber = 0;\n\t\t\t\t\tvar lbi = 0;\n\t\t\t\t\tvar voice = staff.voices[k];\n\t\t\t\t\tvar start = 0;\n\t\t\t\t\tfor (var e = 0; e < voice.length; e++) {\n\t\t\t\t\t\tvar el = voice[e];\n\n\t\t\t\t\t\tif (el.el_type === 'bar') {\n\t\t\t\t\t\t\tif (lineBreaks[lbi] === measureNumber) {\n\t\t\t\t\t\t\t\tlineBreakIndexes.push({ ogLine: i, line: outputLine, staff: j, voice: k, start: start, end: e})\n\t\t\t\t\t\t\t\tstart = e + 1;\n\t\t\t\t\t\t\t\toutputLine++;\n\t\t\t\t\t\t\t\tlineCounter = Math.max(lineCounter, outputLine)\n\t\t\t\t\t\t\t\tlbi++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmeasureNumber++;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlineBreakIndexes.push({ ogLine: i, line: outputLine, staff: j, voice: k, start: start, end: voice.length})\n\t\t\t\t\toutputLine++;\n\t\t\t\t\tlineCounter = Math.max(lineCounter, outputLine)\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlineBreakIndexes.push({ ogLine: i, line: outputLine })\n\t\t\toutputLine++;\n\t\t\tlineCounter = Math.max(lineCounter, outputLine)\n\t\t}\n\t}\n\treturn lineBreakIndexes;\n}\n\n\nfunction freeFormLineBreaks(widths, lineBreakPoint) {\n\tvar lineBreaks = [];\n\tvar totals = [];\n\tvar totalThisLine = 0;\n\t// run through each measure and see if the accumulation is less than the ideal.\n\t// if it passes the ideal, then see whether the last or this one is closer to the ideal.\n\tfor (var i = 0; i < widths.length; i++) {\n\t\tvar width = widths[i];\n\t\tvar attemptedWidth = totalThisLine + width;\n\t\tif (attemptedWidth < lineBreakPoint)\n\t\t\ttotalThisLine = attemptedWidth;\n\t\telse {\n\t\t\t// This just passed the ideal, so see whether the previous or the current number of measures is closer.\n\t\t\tvar oldDistance = lineBreakPoint - totalThisLine;\n\t\t\tvar newDistance = attemptedWidth - lineBreakPoint;\n\t\t\tif (oldDistance < newDistance && totalThisLine > 0) {\n\t\t\t\tlineBreaks.push(i - 1);\n\t\t\t\ttotals.push(Math.round(totalThisLine - width));\n\t\t\t\ttotalThisLine = width;\n\t\t\t} else {\n\t\t\t\tif (i < widths.length-1) {\n\t\t\t\t\tlineBreaks.push(i);\n\t\t\t\t\ttotals.push(Math.round(totalThisLine));\n\t\t\t\t\ttotalThisLine = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\ttotals.push(Math.round(totalThisLine));\n\treturn { lineBreaks: lineBreaks, totals: totals };\n}\n\nfunction clone(arr) {\n\tvar newArr = [];\n\tfor (var i = 0; i < arr.length; i++)\n\t\tnewArr.push(arr[i]);\n\treturn newArr;\n}\n\nfunction oneTry(measureWidths, idealWidths, accumulator, lineAccumulator, lineWidths, lastVariance, highestVariance, currLine, lineBreaks, startIndex, otherTries) {\n\tfor (var i = startIndex; i < measureWidths.length; i++) {\n\t\tvar measureWidth = measureWidths[i];\n\t\taccumulator += measureWidth;\n\t\tlineAccumulator += measureWidth;\n\t\tvar thisVariance = Math.abs(accumulator - idealWidths[currLine]);\n\t\tvar varianceIsClose = Math.abs(thisVariance - lastVariance) < idealWidths[0] / 10; // see if the difference is less than 10%, if so, run the test both ways.\n\t\tif (varianceIsClose) {\n\t\t\tif (thisVariance < lastVariance) {\n\t\t\t\t// Also attempt one less measure on the current line - sometimes that works out better.\n\t\t\t\tvar newWidths = clone(lineWidths);\n\t\t\t\tvar newBreaks = clone(lineBreaks);\n\t\t\t\tnewBreaks.push(i-1);\n\t\t\t\tnewWidths.push(lineAccumulator - measureWidth);\n\t\t\t\totherTries.push({\n\t\t\t\t\taccumulator: accumulator,\n\t\t\t\t\tlineAccumulator: measureWidth,\n\t\t\t\t\tlineWidths: newWidths,\n\t\t\t\t\tlastVariance: Math.abs(accumulator - idealWidths[currLine+1]),\n\t\t\t\t\thighestVariance: Math.max(highestVariance, lastVariance),\n\t\t\t\t\tcurrLine: currLine+1,\n\t\t\t\t\tlineBreaks: newBreaks,\n\t\t\t\t\tstartIndex: i+1});\n\t\t\t} else if (thisVariance > lastVariance && i < measureWidths.length-1) {\n\t\t\t\t// Also attempt one extra measure on this line.\n\t\t\t\tnewWidths = clone(lineWidths);\n\t\t\t\tnewBreaks = clone(lineBreaks);\n\t\t\t\t// newBreaks[newBreaks.length-1] = i;\n\t\t\t\t// newWidths[newWidths.length-1] = lineAccumulator;\n\t\t\t\totherTries.push({\n\t\t\t\t\taccumulator: accumulator,\n\t\t\t\t\tlineAccumulator: lineAccumulator,\n\t\t\t\t\tlineWidths: newWidths,\n\t\t\t\t\tlastVariance: thisVariance,\n\t\t\t\t\thighestVariance: Math.max(highestVariance, thisVariance),\n\t\t\t\t\tcurrLine: currLine,\n\t\t\t\t\tlineBreaks: newBreaks,\n\t\t\t\t\tstartIndex: i+1});\n\t\t\t}\n\t\t}\n\t\tif (thisVariance > lastVariance) {\n\t\t\tlineBreaks.push(i - 1);\n\t\t\tcurrLine++;\n\t\t\thighestVariance = Math.max(highestVariance, lastVariance);\n\t\t\tlastVariance = Math.abs(accumulator - idealWidths[currLine]);\n\t\t\tlineWidths.push(lineAccumulator - measureWidth);\n\t\t\tlineAccumulator = measureWidth;\n\t\t} else {\n\t\t\tlastVariance = thisVariance;\n\t\t}\n\t}\n\tlineWidths.push(lineAccumulator);\n}\n\nfunction optimizeLineWidths(widths, lineBreakPoint, lineBreaks, explanation) {\n\t//\tfigure out how many lines\n\tvar numLines = Math.ceil(widths.total / lineBreakPoint); // + 1 TODO-PER: this used to be plus one - not sure why\n\n\t//\tget the ideal width for a line (cumulative width / num lines) - approx the same as lineBreakPoint except for rounding\n\tvar idealWidth = Math.floor(widths.total / numLines);\n\n\t//\tget each ideal line width (1*ideal, 2*ideal, 3*ideal, etc)\n\tvar idealWidths = [];\n\tfor (var i = 0; i < numLines; i++)\n\t\tidealWidths.push(idealWidth*(i+1));\n\n\t//\tfrom first measure, step through accum. Widths until the abs of the ideal is greater than the last one.\n\t// This can sometimes look funny in edge cases, so when the length is within 10%, try one more or one less to see which is better.\n\t// This is better than trying all the possibilities because that would get to be a huge number for even a medium size piece.\n\t// This method seems to never generate more than about 16 tries and it is usually 4 or less.\n\tvar otherTries = [];\n\totherTries.push({\n\t\taccumulator: 0,\n\t\tlineAccumulator: 0,\n\t\tlineWidths: [],\n\t\tlastVariance: 999999,\n\t\thighestVariance: 0,\n\t\tcurrLine: 0,\n\t\tlineBreaks: [], // These are the zero-based last measure on each line\n\t\tstartIndex: 0});\n\tvar index = 0;\n\twhile (index < otherTries.length) {\n\t\toneTry(widths.measureWidths,\n\t\t\tidealWidths,\n\t\t\totherTries[index].accumulator,\n\t\t\totherTries[index].lineAccumulator,\n\t\t\totherTries[index].lineWidths,\n\t\t\totherTries[index].lastVariance,\n\t\t\totherTries[index].highestVariance,\n\t\t\totherTries[index].currLine,\n\t\t\totherTries[index].lineBreaks,\n\t\t\totherTries[index].startIndex,\n\t\t\totherTries);\n\t\tindex++;\n\t}\n\tfor (i = 0; i < otherTries.length; i++) {\n\t\tvar otherTry = otherTries[i];\n\t\totherTry.variances = [];\n\t\totherTry.aveVariance = 0;\n\t\tfor (var j = 0; j < otherTry.lineWidths.length; j++) {\n\t\t\tvar lineWidth = otherTry.lineWidths[j];\n\t\t\totherTry.variances.push(lineWidth - idealWidths[0]);\n\t\t\totherTry.aveVariance += Math.abs(lineWidth - idealWidths[0]);\n\t\t}\n\t\totherTry.aveVariance =  otherTry.aveVariance / otherTry.lineWidths.length;\n\t\texplanation.attempts.push({ type: \"optimizeLineWidths\", lineBreaks: otherTry.lineBreaks, variances: otherTry.variances, aveVariance: otherTry.aveVariance, widths: widths.measureWidths });\n\t}\n\tvar smallest = 9999999;\n\tvar smallestIndex = -1;\n\tfor (i = 0; i < otherTries.length; i++) {\n\t\totherTry = otherTries[i];\n\t\tif (otherTry.aveVariance < smallest) {\n\t\t\tsmallest = otherTry.aveVariance;\n\t\t\tsmallestIndex = i;\n\t\t}\n\t}\n\treturn { failed: false, lineBreaks: otherTries[smallestIndex].lineBreaks, variance: otherTries[smallestIndex].highestVariance };\n}\n\nfunction fixedMeasureLineBreaks(widths, lineBreakPoint, preferredMeasuresPerLine) {\n\tvar lineBreaks = [];\n\tvar totals = [];\n\tvar thisWidth = 0;\n\tvar failed = false;\n\tfor (var i = 0; i < widths.length; i++) {\n\t\tthisWidth += widths[i];\n\t\tif (thisWidth > lineBreakPoint) {\n\t\t\tfailed = true;\n\t\t}\n\t\tif (i % preferredMeasuresPerLine === (preferredMeasuresPerLine-1)) {\n\t\t\tif (i !== widths.length-1) // Don't bother putting a line break for the last line - it's already a break.\n\t\t\t\tlineBreaks.push(i);\n\t\t\ttotals.push(Math.round(thisWidth));\n\t\t\tthisWidth = 0;\n\t\t}\n\t}\n\treturn { failed: failed, totals: totals, lineBreaks: lineBreaks };\n}\n\nfunction getRevisedTuneParams(lineBreaks, staffWidth, params) {\n\n\tvar revisedParams = {\n\t\tlineBreaks: lineBreaks,\n\t\tstaffwidth: staffWidth\n\t};\n\tfor (var key in params) {\n\t\tif (params.hasOwnProperty(key) && key !== 'wrap' && key !== 'staffwidth') {\n\t\t\trevisedParams[key] = params[key];\n\t\t}\n\t}\n\n\treturn { revisedParams: revisedParams };\n}\n\nfunction calcLineWraps(tune, widths, params) {\n\t// For calculating how much can go on the line, it depends on the width of the line. It is a convenience to just divide it here\n\t// by the minimum spacing instead of multiplying the min spacing later.\n\t// The scaling works differently: this is done by changing the scaling of the outer SVG, so the scaling needs to be compensated\n\t// for here, because the actual width will be different from the calculated numbers.\n\n\t// If the desired width is less than the margin, just punt and return the original tune\n\t//console.log(widths)\n\tif (widths.length === 0 || params.staffwidth < widths[0].left) {\n\t\treturn {\n\t\t\treParse: false,\n\t\t\texplanation: \"Staff width is narrower than the margin\",\n\t\t\trevisedParams: params\n\t\t};\n\t}\n\tvar scale = params.scale ? Math.max(params.scale, 0.1) : 1;\n\tvar minSpacing = params.wrap.minSpacing ? Math.max(parseFloat(params.wrap.minSpacing), 1) : 1;\n\tvar minSpacingLimit = params.wrap.minSpacingLimit ? Math.max(parseFloat(params.wrap.minSpacingLimit), 1) : minSpacing - 0.1;\n\tvar maxSpacing = params.wrap.maxSpacing ? Math.max(parseFloat(params.wrap.maxSpacing), 1) : undefined;\n\tif (params.wrap.lastLineLimit && !maxSpacing)\n\t\tmaxSpacing = Math.max(parseFloat(params.wrap.lastLineLimit), 1);\n\t// var targetHeight = params.wrap.targetHeight ? Math.max(parseInt(params.wrap.targetHeight, 10), 100) : undefined;\n\tvar preferredMeasuresPerLine = params.wrap.preferredMeasuresPerLine ? Math.max(parseInt(params.wrap.preferredMeasuresPerLine, 10), 0) : undefined;\n\n\tvar accumulatedLineBreaks = [];\n\tvar explanations = [];\n\tfor (var s = 0; s < widths.length; s++) {\n\t\tvar section = widths[s];\n\t\tvar usableWidth = params.staffwidth - section.left;\n\t\tvar lineBreakPoint = usableWidth / minSpacing / scale;\n\t\tvar minLineSize = usableWidth / maxSpacing / scale;\n\t\tvar allowableVariance = usableWidth / minSpacingLimit / scale;\n\t\tvar explanation = {\n\t\t\twidths: section,\n\t\t\tlineBreakPoint: lineBreakPoint,\n\t\t\tminLineSize: minLineSize,\n\t\t\tattempts: [],\n\t\t\tstaffWidth: params.staffwidth,\n\t\t\tminWidth: Math.round(allowableVariance)\n\t\t};\n\n\t\t// If there is a preferred number of measures per line, test that first. If none of the lines is too long, then we're finished.\n\t\tvar lineBreaks = null;\n\t\tif (preferredMeasuresPerLine) {\n\t\t\tvar f = fixedMeasureLineBreaks(section.measureWidths, lineBreakPoint, preferredMeasuresPerLine);\n\t\t\texplanation.attempts.push({\n\t\t\t\ttype: \"Fixed Measures Per Line\",\n\t\t\t\tpreferredMeasuresPerLine: preferredMeasuresPerLine,\n\t\t\t\tlineBreaks: f.lineBreaks,\n\t\t\t\tfailed: f.failed,\n\t\t\t\ttotals: f.totals\n\t\t\t});\n\t\t\tif (!f.failed)\n\t\t\t\tlineBreaks = f.lineBreaks;\n\t\t}\n\n\t\t// If we don't have lineBreaks yet, use the free form method of line breaks.\n\t\t// This will be called either if Preferred Measures is not used, or if the music is just weird - like a single measure is way too crowded.\n\t\tif (!lineBreaks) {\n\t\t\tvar ff = freeFormLineBreaks(section.measureWidths, lineBreakPoint);\n\t\t\texplanation.attempts.push({type: \"Free Form\", lineBreaks: ff.lineBreaks, totals: ff.totals});\n\t\t\tlineBreaks = ff.lineBreaks;\n\n\t\t\t// We now have an acceptable number of lines, but the measures may not be optimally distributed. See if there is a better distribution.\n\t\t\tif (lineBreaks.length > 0 && section.measureWidths.length < 25) {\n\t\t\t\t// Only do this if everything doesn't fit on one line.\n\t\t\t\t// This is an intensive operation and it is optional so just do it for shorter music.\n\t\t\t\tff = optimizeLineWidths(section, lineBreakPoint, lineBreaks, explanation);\n\t\t\t\texplanation.attempts.push({\n\t\t\t\t\ttype: \"Optimize\",\n\t\t\t\t\tfailed: ff.failed,\n\t\t\t\t\treason: ff.reason,\n\t\t\t\t\tlineBreaks: ff.lineBreaks,\n\t\t\t\t\ttotals: ff.totals\n\t\t\t\t});\n\t\t\t\tif (!ff.failed)\n\t\t\t\t\tlineBreaks = ff.lineBreaks;\n\t\t\t}\n\t\t}\n\t\taccumulatedLineBreaks.push(lineBreaks);\n\t\texplanations.push(explanation);\n\t}\n\t// If the vertical space exceeds targetHeight, remove a line and try again. If that is too crowded, then don't use it.\n\tvar staffWidth = params.staffwidth;\n\tvar ret = getRevisedTuneParams(accumulatedLineBreaks, staffWidth, params);\n\tret.explanation = explanations;\n\tret.reParse = true;\n\treturn ret;\n}\n\nmodule.exports = { wrapLines: wrapLines, calcLineWraps: calcLineWraps };\n"},"lineCount":443}},"error":null,"hash":"294f613fa5072a8ea24b7a5336e94a4d","cacheData":{"env":{}}}